/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-01-08 17:48:37 UTC)
 * on 2016-01-15 at 19:54:35 UTC 
 * Modify at your own risk.
 */

package com.google.sample.backend.messaging;

/**
 * Service definition for Messaging (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MessagingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Messaging extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the messaging library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://convene-backend.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "messaging/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Messaging(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Messaging(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "findRecord".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link FindRecord#execute()} method to invoke the remote operation.
   *
   * @param fbId
   * @return the request
   */
  public FindRecord findRecord(java.lang.String fbId) throws java.io.IOException {
    FindRecord result = new FindRecord(fbId);
    initialize(result);
    return result;
  }

  public class FindRecord extends MessagingRequest<com.google.sample.backend.messaging.model.RegistrationRecord> {

    private static final String REST_PATH = "findRecord/{fbId}";

    /**
     * Create a request for the method "findRecord".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link FindRecord#execute()} method to invoke the remote
     * operation. <p> {@link
     * FindRecord#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param fbId
     * @since 1.13
     */
    protected FindRecord(java.lang.String fbId) {
      super(Messaging.this, "GET", REST_PATH, null, com.google.sample.backend.messaging.model.RegistrationRecord.class);
      this.fbId = com.google.api.client.util.Preconditions.checkNotNull(fbId, "Required parameter fbId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public FindRecord setAlt(java.lang.String alt) {
      return (FindRecord) super.setAlt(alt);
    }

    @Override
    public FindRecord setFields(java.lang.String fields) {
      return (FindRecord) super.setFields(fields);
    }

    @Override
    public FindRecord setKey(java.lang.String key) {
      return (FindRecord) super.setKey(key);
    }

    @Override
    public FindRecord setOauthToken(java.lang.String oauthToken) {
      return (FindRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public FindRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FindRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FindRecord setQuotaUser(java.lang.String quotaUser) {
      return (FindRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public FindRecord setUserIp(java.lang.String userIp) {
      return (FindRecord) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String fbId;

    /**

     */
    public java.lang.String getFbId() {
      return fbId;
    }

    public FindRecord setFbId(java.lang.String fbId) {
      this.fbId = fbId;
      return this;
    }

    @Override
    public FindRecord set(String parameterName, Object value) {
      return (FindRecord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "send".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link Send#execute()} method to invoke the remote operation.
   *
   * @param message
   * @param senderId
   * @return the request
   */
  public Send send(java.lang.String message, java.lang.String senderId) throws java.io.IOException {
    Send result = new Send(message, senderId);
    initialize(result);
    return result;
  }

  public class Send extends MessagingRequest<Void> {

    private static final String REST_PATH = "sendMessage/{message}/{senderId}";

    /**
     * Create a request for the method "send".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link Send#execute()} method to invoke the remote operation. <p>
     * {@link Send#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param message
     * @param senderId
     * @since 1.13
     */
    protected Send(java.lang.String message, java.lang.String senderId) {
      super(Messaging.this, "POST", REST_PATH, null, Void.class);
      this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      this.senderId = com.google.api.client.util.Preconditions.checkNotNull(senderId, "Required parameter senderId must be specified.");
    }

    @Override
    public Send setAlt(java.lang.String alt) {
      return (Send) super.setAlt(alt);
    }

    @Override
    public Send setFields(java.lang.String fields) {
      return (Send) super.setFields(fields);
    }

    @Override
    public Send setKey(java.lang.String key) {
      return (Send) super.setKey(key);
    }

    @Override
    public Send setOauthToken(java.lang.String oauthToken) {
      return (Send) super.setOauthToken(oauthToken);
    }

    @Override
    public Send setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Send) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Send setQuotaUser(java.lang.String quotaUser) {
      return (Send) super.setQuotaUser(quotaUser);
    }

    @Override
    public Send setUserIp(java.lang.String userIp) {
      return (Send) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String message;

    /**

     */
    public java.lang.String getMessage() {
      return message;
    }

    public Send setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String senderId;

    /**

     */
    public java.lang.String getSenderId() {
      return senderId;
    }

    public Send setSenderId(java.lang.String senderId) {
      this.senderId = senderId;
      return this;
    }

    @Override
    public Send set(String parameterName, Object value) {
      return (Send) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendFriendId".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link SendFriendId#execute()} method to invoke the remote operation.
   *
   * @param friendFbId
   * @return the request
   */
  public SendFriendId sendFriendId(java.lang.String friendFbId) throws java.io.IOException {
    SendFriendId result = new SendFriendId(friendFbId);
    initialize(result);
    return result;
  }

  public class SendFriendId extends MessagingRequest<Void> {

    private static final String REST_PATH = "sendId/{friend_fb_id}";

    /**
     * Create a request for the method "sendFriendId".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link SendFriendId#execute()} method to invoke the remote
     * operation. <p> {@link
     * SendFriendId#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param friendFbId
     * @since 1.13
     */
    protected SendFriendId(java.lang.String friendFbId) {
      super(Messaging.this, "POST", REST_PATH, null, Void.class);
      this.friendFbId = com.google.api.client.util.Preconditions.checkNotNull(friendFbId, "Required parameter friendFbId must be specified.");
    }

    @Override
    public SendFriendId setAlt(java.lang.String alt) {
      return (SendFriendId) super.setAlt(alt);
    }

    @Override
    public SendFriendId setFields(java.lang.String fields) {
      return (SendFriendId) super.setFields(fields);
    }

    @Override
    public SendFriendId setKey(java.lang.String key) {
      return (SendFriendId) super.setKey(key);
    }

    @Override
    public SendFriendId setOauthToken(java.lang.String oauthToken) {
      return (SendFriendId) super.setOauthToken(oauthToken);
    }

    @Override
    public SendFriendId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendFriendId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendFriendId setQuotaUser(java.lang.String quotaUser) {
      return (SendFriendId) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendFriendId setUserIp(java.lang.String userIp) {
      return (SendFriendId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("friend_fb_id")
    private java.lang.String friendFbId;

    /**

     */
    public java.lang.String getFriendFbId() {
      return friendFbId;
    }

    public SendFriendId setFriendFbId(java.lang.String friendFbId) {
      this.friendFbId = friendFbId;
      return this;
    }

    @Override
    public SendFriendId set(String parameterName, Object value) {
      return (SendFriendId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendLatitude".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link SendLatitude#execute()} method to invoke the remote operation.
   *
   * @param latitude
   * @return the request
   */
  public SendLatitude sendLatitude(java.lang.Double latitude) throws java.io.IOException {
    SendLatitude result = new SendLatitude(latitude);
    initialize(result);
    return result;
  }

  public class SendLatitude extends MessagingRequest<Void> {

    private static final String REST_PATH = "sendLatitude/{latitude}";

    /**
     * Create a request for the method "sendLatitude".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link SendLatitude#execute()} method to invoke the remote
     * operation. <p> {@link
     * SendLatitude#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param latitude
     * @since 1.13
     */
    protected SendLatitude(java.lang.Double latitude) {
      super(Messaging.this, "POST", REST_PATH, null, Void.class);
      this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
    }

    @Override
    public SendLatitude setAlt(java.lang.String alt) {
      return (SendLatitude) super.setAlt(alt);
    }

    @Override
    public SendLatitude setFields(java.lang.String fields) {
      return (SendLatitude) super.setFields(fields);
    }

    @Override
    public SendLatitude setKey(java.lang.String key) {
      return (SendLatitude) super.setKey(key);
    }

    @Override
    public SendLatitude setOauthToken(java.lang.String oauthToken) {
      return (SendLatitude) super.setOauthToken(oauthToken);
    }

    @Override
    public SendLatitude setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendLatitude) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendLatitude setQuotaUser(java.lang.String quotaUser) {
      return (SendLatitude) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendLatitude setUserIp(java.lang.String userIp) {
      return (SendLatitude) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Double latitude;

    /**

     */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    public SendLatitude setLatitude(java.lang.Double latitude) {
      this.latitude = latitude;
      return this;
    }

    @Override
    public SendLatitude set(String parameterName, Object value) {
      return (SendLatitude) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendLongitude".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link SendLongitude#execute()} method to invoke the remote operation.
   *
   * @param longitude
   * @return the request
   */
  public SendLongitude sendLongitude(java.lang.Double longitude) throws java.io.IOException {
    SendLongitude result = new SendLongitude(longitude);
    initialize(result);
    return result;
  }

  public class SendLongitude extends MessagingRequest<Void> {

    private static final String REST_PATH = "sendLongitude/{longitude}";

    /**
     * Create a request for the method "sendLongitude".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link SendLongitude#execute()} method to invoke the remote
     * operation. <p> {@link SendLongitude#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param longitude
     * @since 1.13
     */
    protected SendLongitude(java.lang.Double longitude) {
      super(Messaging.this, "POST", REST_PATH, null, Void.class);
      this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
    }

    @Override
    public SendLongitude setAlt(java.lang.String alt) {
      return (SendLongitude) super.setAlt(alt);
    }

    @Override
    public SendLongitude setFields(java.lang.String fields) {
      return (SendLongitude) super.setFields(fields);
    }

    @Override
    public SendLongitude setKey(java.lang.String key) {
      return (SendLongitude) super.setKey(key);
    }

    @Override
    public SendLongitude setOauthToken(java.lang.String oauthToken) {
      return (SendLongitude) super.setOauthToken(oauthToken);
    }

    @Override
    public SendLongitude setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendLongitude) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendLongitude setQuotaUser(java.lang.String quotaUser) {
      return (SendLongitude) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendLongitude setUserIp(java.lang.String userIp) {
      return (SendLongitude) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Double longitude;

    /**

     */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    public SendLongitude setLongitude(java.lang.Double longitude) {
      this.longitude = longitude;
      return this;
    }

    @Override
    public SendLongitude set(String parameterName, Object value) {
      return (SendLongitude) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Messaging}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Messaging}. */
    @Override
    public Messaging build() {
      return new Messaging(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MessagingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMessagingRequestInitializer(
        MessagingRequestInitializer messagingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(messagingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
